# -*- coding: utf-8 -*-
from shake import redirect_to, url_for, flash, NotFound, StorageDict

from .. import settings
from ..models import db
from ..settings import render

from .forms import [[ table_name ]]Form
from .models import [[ table_name ]]


# GET /[[ resource_plural ]]/
def index(request):
    [[ resource_plural ]] = db.query([[ table_name ]])

    return render('[[ resource_plural ]]/index.html', locals())


# GET /[[ resource_plural ]]/1
def show(request, uid):
    [[ resource ]] = db.query([[ table_name ]]).get_or_notfound(uid)

    return render('[[ resource_plural ]]/show.html', locals())


# GET /[[ resource_plural ]]/new
def new(request):
    form = [[ table_name ]]Form()

    return render('[[ resource_plural ]]/new.html', locals())


# GET /[[ resource_plural ]]/1/edit
def edit(request, uid):
    [[ resource ]] = db.query([[ table_name ]]).get_or_notfound(uid)
    form = [[ table_name ]]Form(request.form, [[ resource ]])

    return render('[[ resource_plural ]]/edit.html', locals())


# POST /[[ resource_plural ]]/
def create(request):
    form = [[ table_name ]]Form(request.form)

    if not form.validate():
        return render('[[ resource_plural ]]/new.html', locals())
    
    [[ resource ]]_data = StorageDict()
    form.populate_obj([[ resource ]]_data)
    [[ resource ]] = [[ table_name ]](**[[ resource ]]_data)
    db.add([[ resource ]])
    db.commit()
    flash(request, 'CREATED')

    index_url = url_for('index_[[ resource_plural ]]')
    return redirect_to(index_url)


# PUT /[[ resource_plural ]]/1
# POST /[[ resource_plural ]]/1
def update(request, uid):
    [[ resource ]] = db.query([[ table_name ]]).get_or_notfound(uid)
    form = [[ table_name ]]Form(request.form, [[ resource ]])

    if not form.validate():
        return render('[[ resource_plural ]]/edit.html', locals())
    
    form.populate_obj([[ resource ]])
    db.commit()
    flash(request, 'UPDATED')

    index_url = url_for('index_[[ resource_plural ]]')
    return redirect_to(index_url)


# /[[ resource_plural ]]/1/delete
def delete(request, uid):
    [[ resource ]] = db.query([[ table_name ]]).get_or_notfound(uid)
    db.session.delete([[ resource ]])
    db.commit()
    flash(request, 'DELETED')

    index_url = url_for('index_[[ resource_plural ]]')
    return redirect_to(index_url)

